import time
import asyncio
import requests
import pandas as pd

from aiogram.types import CallbackQuery, Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from settings import config, EDIT_MSG_DELAY
from keyboard.mkp_cancel import mkp_cancel
from keyboard.mkp_choice import mkp_choice
from external.messages import send_to_group
from bot_create import bot, api_key
from modules.randomize_msg import generate_variations


url = "https://api.brevo.com/v3/smtp/email"


class Startwork(StatesGroup):
    theme = State()
    text = State()
    choice = State()
    link = State()
    excel = State()
    recipients = State()


router_cb_start = Router()


@router_cb_start.callback_query(F.data.startswith('start.'))
async def start_working(call: CallbackQuery, state: FSMContext):
    if call.data == 'start.work':
        await call.message.edit_text(text='<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏: </b>',
                                     parse_mode='html', reply_markup=mkp_cancel)
        await state.set_state(Startwork.theme)


@router_cb_start.message(Startwork.theme)
async def input_theme(msg: Message, state: FSMContext):
    await state.update_data(theme=msg.text)
    await msg.answer('<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏(–º–æ–∂–Ω–æ —Å html —Ç–µ–≥–∞–º–∏)</b>', parse_mode='html')
    await state.set_state(Startwork.text)


@router_cb_start.message(Startwork.text)
async def input_theme(msg: Message, state: FSMContext):
    await state.update_data(text=msg.text)
    await msg.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>',
                     reply_markup=mkp_choice,
                     parse_mode='html')
    await state.set_state(Startwork.choice)


@router_cb_start.callback_query(lambda c: c.data.startswith('choice.'))
async def select_choice(callback_query: CallbackQuery, state: FSMContext):
    choice = callback_query.data
    message_text = ''
    if choice == 'choice.one_link_all':
        message_text = '<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt)</b>'
        await state.set_state(Startwork.recipients)
    elif choice == 'choice.personal_link':
        message_text = '<b>üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. \n–ü—Ä–∏–º–µ—Ä: https://hotelbooking.com/</b>'
        await state.set_state(Startwork.link)
    await callback_query.message.edit_text(message_text, parse_mode='html')
    await callback_query.answer()


@router_cb_start.message(Startwork.link)
async def input_link(msg: Message, state: FSMContext):
    await state.update_data(link=msg.text)
    await msg.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ excel —Ñ–∞–π–ª —Å –±—Ä–æ–Ω—è–º–∏, –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ email —ç—Ç–æ –≥–æ—Å—Ç–µ–≤—ã–µ, –∞ id, —ç—Ç–æ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>',
                     parse_mode='html')
    await state.set_state(Startwork.excel)


@router_cb_start.message(Startwork.excel)
async def input_excel(msg: Message, state: FSMContext):    
    if msg.document:
        file_id = msg.document.file_id
        file = await bot.get_file(file_id)
        content = await bot.download_file(file.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        with open('temp.xlsx', 'wb') as f:
            f.write(content.getvalue())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º getvalue() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤

        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é pandas, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        df = pd.read_excel('temp.xlsx', header=0)  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
        bookings_ids = df['id'].tolist()
        recipients = df['emails'].tolist()
        bookings_list = list(zip(bookings_ids, recipients))
        
        data = await state.get_data()
        await state.clear()
        await send_to_emails(msg, data, bookings_list, True)


@router_cb_start.message(Startwork.recipients)
async def input_recipients(msg: Message, state: FSMContext):
    recipients = msg.text
    if msg.document:
        file_id = msg.document.file_id
        file = await bot.get_file(file_id)
        content = await bot.download_file(file.file_path)
        content_str = content.read().decode('utf-8')
        recipients = content_str.strip()
    recipients_list = recipients.strip().split('\n')
    data = await state.get_data()
    await state.clear()
    await send_to_emails(msg, data, recipients_list)


async def send_to_emails(msg, data: dict, recipients_or_bookings: list, is_excel: bool = False):
    count_recipients = len(recipients_or_bookings)
    count = 0
    last_edit_time = 0

    theme = data['theme']
    text = str(data['text'])
    link = data.get('link', '')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å

    delay = config.get_delay()
    message_count = await msg.answer(f'<b>‚åõÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{count}/{count_recipients}]</b>',
                                     parse_mode='html')
    generation = config.get_generation()
    
    for item in recipients_or_bookings:
        if is_excel:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –∑–∞–º–µ–Ω—è–µ–º {link} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É
            current_text = text.replace('{link}', link + item[0])
            recipient = item[0]  # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            print(recipient)
            print(current_text)
        else:
            current_text = text
            recipient = item  # –ü–æ–ª—É—á–∞–µ–º email –Ω–∞–ø—Ä—è–º—É—é

        count += 1
        current_time = time.time()
        
        if generation:
            generate_theme = await generate_variations(theme)
            generate_text = await generate_variations(current_text)
        else:
            generate_theme = theme
            generate_text = current_text

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        if current_time - last_edit_time >= EDIT_MSG_DELAY:
            await message_count.edit_text(
                f'<b>‚åõÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É!'
                f'\n‚åõÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫'
                f'\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {"–≤–∫–ª—é—á–µ–Ω–∞" if generation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"}'
                f'\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{count}/{count_recipients}]'
                f'\nüö´ –û—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {config.get_count_errors()}</b>',
                parse_mode='html'
            )
            last_edit_time = current_time

        await send_email(generate_theme, generate_text, recipient)
        await asyncio.sleep(delay)

    await msg.answer('<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>', parse_mode='html')
    await send_to_group(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} —Ä–∞–∑–æ—Å–ª–∞–ª {count} –≥–æ—Å—Ç–µ–≤—ã—Ö</b>')



async def send_email(subject, html_body, recipient):
    data = {
        "sender": {"email": "noreply@wubook.live"},  # –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        "to": [{"email": recipient}],  # –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        "subject": subject,
        "htmlContent": f"{html_body}"  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
    }

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "api-key": api_key
    }

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        print(f'Sent to {recipient}')
    else:
        print(f'Error: {response.status_code}, {response.text}')
